import React, { useEffect, useState } from "react";
import FoodCards from "../components/FoodCards";
import image from "../assets/soft-drink.png"; // Icon for drinks
import image1 from "../assets/burger.png"; // Icon for hamburgers
import image2 from "../assets/potato-fries.png"; // Icon for sides
import image3 from "../assets/cake_icon.png";
import axios from "axios";
import CartModal from "../components/CartModal"; // Import your modal component
import { useDispatch } from "react-redux";
import { useNavigate } from "react-router-dom";
import { saveCartProducts } from "../redux/actions/cartActions";
import { loadUser } from "../redux/actions/authAction";
import ModalRegister from "../components/ModalRegister";



function MenuView() {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const [products, setProducts] = useState([]);
  const [cartItems, setCartItems] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [isOpenRegisterModal, setisOpenRegisterModal] = useState(false); // Estado para el modal de registro

  console.log(isOpenRegisterModal);

  // Cargar los productos guardados en el carrito desde localStorage cuando se monta el componente
  useEffect(() => {
    const storedProducts = JSON.parse(localStorage.getItem("product")) || [];
    if (storedProducts.length !== 0) {
      setCartItems(storedProducts);
    }
  }, []);

  useEffect(() => {
    // Verifica si el usuario está logueado
    const token = localStorage.getItem("token");
    if (token) {
      setIsLoggedIn(true);
      dispatch(loadUser()); // El usuario está logueado
    } else {
      setIsLoggedIn(false); // El usuario no está logueado
    }
  }, [dispatch]);

  useEffect(() => {
    // Recuperar productos de la API
    const fetchProducts = async () => {
      try {
        const response = await axios.get("http://localhost:8080/api/products/");
        setProducts(response.data);
      } catch (error) {
        console.error("Error fetching the products", error);
      }
    };
    fetchProducts();
  }, []);

  // Sincronizar el carrito con el localStorage cada vez que cambia el estado de cartItems
  useEffect(() => {
    localStorage.setItem("product", JSON.stringify(cartItems));
  }, [cartItems]);

  const burgers = products.filter((product) => product.category === "BURGER");
  const frying = products.filter((product) => product.category === "FRYING");
  const drinks = products.filter((product) => product.category === "DRINK");
  const desserts = products.filter((product) => product.category === "DESSERT");

  const [selectedAll, setSelectedAll] = useState("bg-yellow-500");
  const [selectedBurger, setSelectedBurger] = useState("bg-white");
  const [selectedFries, setSelectedFries] = useState("bg-white");
  const [selectedDrink, setSelectedDrink] = useState("bg-white");
  const [selectedDesserts, setSelectedDesserts] = useState("bg-white");

  const [showDivAll, setShowDivAll] = useState("");
  const [showDivBurger, setShowDivBurger] = useState("");
  const [showDivFries, setShowDivFries] = useState("");
  const [showDivDrink, setShowDivDrink] = useState("");
  const [showDivDesserts, setShowDivDesserts] = useState("");

  const addToCart = (product) => {
    if (!isLoggedIn) { // Cambia isUserLoggedIn a isLoggedIn
      setIsLoggedIn(false);
      setisOpenRegisterModal(true); // Abre el modal si el usuario no está logueado
      return; // Salimos de la función para no añadir el producto al carrito
    }

    const existingItem = cartItems.find(
      (item) => item.nameProduct === product.nameProduct
    );

    if (existingItem) {
      existingItem.quantity += 1; // Incrementar la cantidad si el producto ya está en el carrito
      setCartItems([...cartItems]); // Actualizar el estado para reconocer el cambio
    } else {
      setCartItems((prevItems) => [
        ...prevItems,
        {
          ...product,
          quantity: 1,
          idProduct: product.id,
          backgroundImage: product.img,
        },
      ]); // Agregar nuevo producto
    }
    setIsModalOpen(true); // Abrir el modal cuando se añade el producto
  };

  const removeFromCart = (index) => {
    setCartItems((prevItems) => prevItems.filter((_, i) => i !== index));
  };

  const handleSendCart = () => {
    console.log("Sending cart items:", cartItems);
    dispatch(saveCartProducts(cartItems));
    navigate("/sendOrder");
    setIsModalOpen(false); // Cierra el modal después de enviar el carrito
  };

  const handleQuantityChange = (index, newQuantity) => {
    setCartItems((prevItems) => {
      const updatedItems = [...prevItems];
      updatedItems[index].quantity = newQuantity; // Actualiza la cantidad del producto
      return updatedItems;
    });
  };

  const handleRemoveAll = () => {
    setCartItems([]); // Vacía el carrito
  };

  console.log(cartItems);



  return (
    <div className="bground flex flex-col min-h-screen">
      <div className="mb-[70px] mt-[150px]">
        <div className="flex flex-col gap-5 mx-5 justify-center items-center">
          <div className="flex flex-row gap-5 flex-wrap justify-center">
            <button
              onClick={() => {
                setSelectedBurger("bg-white");
                setSelectedFries("bg-white");
                setSelectedDrink("bg-white");
                setSelectedDesserts("bg-white");
                setSelectedAll("bg-yellow-500");
                setShowDivBurger("");
                setShowDivFries("");
                setShowDivDrink("");
                setShowDivDesserts("");
              }}
            >
              <div
                className={`shadowButton ${selectedAll} p-2 w-16 flex flex-col items-center justify-center h-16 rounded-lg`}
              >
                <h1 className="text-2xl font-extrabold">ALL</h1>
              </div>
            </button>

            <button
              onClick={() => {
                setSelectedAll("bg-white");
                setSelectedFries("bg-white");
                setSelectedDrink("bg-white");
                setSelectedDesserts("bg-white");
                setSelectedBurger("bg-yellow-500");
                setShowDivBurger("");
                setShowDivFries("hidden");
                setShowDivDrink("hidden");
                setShowDivDesserts("hidden");
              }}
            >
              <div
                className={`shadowButton ${selectedBurger} p-2 w-16 rounded-lg`}
              >
                <img src={image1} alt="Burger" />
              </div>
            </button>

            <button
              onClick={() => {
                setSelectedBurger("bg-white");
                setSelectedAll("bg-white");
                setSelectedDrink("bg-white");
                setSelectedDesserts("bg-white");
                setSelectedFries("bg-yellow-500");
                setShowDivBurger("hidden");
                setShowDivFries("");
                setShowDivDrink("hidden");
                setShowDivDesserts("hidden");
              }}
            >
              <div
                className={`shadowButton ${selectedFries} p-2 w-16 rounded-lg`}
              >
                <img src={image2} alt="Fries" />
              </div>
            </button>

            <button
              onClick={() => {
                setSelectedBurger("bg-white");
                setSelectedFries("bg-white");
                setSelectedAll("bg-white");
                setSelectedDesserts("bg-white");
                setSelectedDrink("bg-yellow-500");
                setShowDivBurger("hidden");
                setShowDivFries("hidden");
                setShowDivDrink("");
                setShowDivDesserts("hidden");
              }}
            >
              <div
                className={`shadowButton ${selectedDrink} p-2 w-16 rounded-lg`}
              >
                <img src={image} alt="Drink" />
              </div>
            </button>

            <button
              onClick={() => {
                setSelectedBurger("bg-white");
                setSelectedFries("bg-white");
                setSelectedDrink("bg-white");
                setSelectedAll("bg-white");
                setSelectedDesserts("bg-yellow-500");
                setShowDivBurger("hidden");
                setShowDivFries("hidden");
                setShowDivDrink("hidden");
                setShowDivDesserts("");
              }}
            >
              <div
                className={`shadowButton ${selectedDesserts} p-2 w-16 rounded-lg`}
              >
                <img src={image3} alt="Desserts" />
              </div>
            </button>
          </div>

          {/* Render Burgers */}
          <div className={`${showDivBurger} mb-[100px]`}>
            <h1 className="shadow text-5xl text-yellow-500 text-center font-extrabold mb-10">
              BURGERS
            </h1>
            <div className="gaga flex flex-wrap gap-10 w-full justify-center">
              {burgers.map((hamburguer) => (
                <FoodCards
                  key={hamburguer.nameProduct}
                  name={hamburguer.nameProduct}
                  description={hamburguer.details}
                  price={hamburguer.priceProduct}
                  backgroundImage={hamburguer.img}
                  typeIcon={image1}
                  onClick={() => addToCart(hamburguer)} // Add to cart
                />
              ))}
            </div>
          </div>

          {/* Render Fried */}
          <div className={`${showDivFries} mb-[100px]`}>
            <h1 className="shadow text-5xl text-yellow-500 text-center font-extrabold mb-10">
              FRIES
            </h1>
            <div className="gaga flex flex-wrap gap-10 w-full justify-center">
              {frying.map((fry) => (
                <FoodCards
                  key={fry.nameProduct}
                  name={fry.nameProduct}
                  description={fry.details}
                  price={fry.priceProduct}
                  backgroundImage={fry.img}
                  typeIcon={image2}
                  onClick={() => addToCart(fry)} // Add to cart
                />
              ))}
            </div>
          </div>

          {/* Render Drinks */}
          <div className={`${showDivDrink} mb-[100px]`}>
            <h1 className="shadow text-5xl text-yellow-500 text-center font-extrabold mb-10">
              DRINKS
            </h1>
            <div className="gaga flex flex-wrap gap-10 w-full justify-center">
              {drinks.map((drink) => (
                <FoodCards
                  key={drink.nameProduct}
                  name={drink.nameProduct}
                  description={drink.details}
                  price={drink.priceProduct}
                  backgroundImage={drink.img}
                  typeIcon={image}
                  onClick={() => addToCart(drink)} // Add to cart
                />
              ))}
            </div>
          </div>

          {/* Render Desserts */}
          <div className={`${showDivDesserts} mb-[100px]`}>
            <h1 className="shadow text-5xl text-yellow-500 text-center font-extrabold mb-10">
              DESSERTS
            </h1>
            <div className="gaga flex flex-wrap gap-10 w-full justify-center">
              {desserts.map((dessert) => (
                <FoodCards
                  key={dessert.nameProduct}
                  name={dessert.nameProduct}
                  description={dessert.details}
                  price={dessert.priceProduct}
                  backgroundImage={dessert.img}
                  typeIcon={image3}
                  onClick={() => addToCart(dessert)} // Add to cart
                />
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Modal for Cart */}
      {isModalOpen && (
        <CartModal
          cartItems={cartItems}
          onRemoveFromCart={removeFromCart}
          onQuantityChange={handleQuantityChange}
          onSendCart={handleSendCart}
          onClose={() => setIsModalOpen(false)}
          onRemoveAll={handleRemoveAll}
        />
      )}

      {isOpenRegisterModal && (<ModalRegister />)}
    </div>
  );
}

export default MenuView;




























































// import React, { useEffect, useState } from 'react'
// import './TablePB.css'
// import axios from 'axios';
// import { header } from 'framer-motion/client';
// import { useSelector } from 'react-redux';
// import { useNavigate } from 'react-router-dom';

// function TablePB() {

//     const [tables, setTables] = useState ([
//         {id:1,number: 1, capacity: 2, status:'AVAILABLE'},
//         {id:2, number: 2, capacity: 4, status:'AVAILABLE'}
//     ])

//     const updateStatus = (id, newStatus) => {
//         const updatedTables = tables.map(table => 
//           table.id === id ? { ...table, status: newStatus } : table
//         );
//         setTables(updatedTables);
//       };

//       console.log(tables[0]. id)
//       console.log(tables[1]. id)


//     const [textColorStatusTable1, setTextColorStatusTable1] = useState('text-[green]')
//     const [bgTable1, setBgTable1] = useState('')
//     const [statusIsSelectedTable1, setStatusIsSelectedTable1] = useState('')
//     const [isDisabledTable1, setIsDisabledTable1] = useState(false)

//     const [textColorStatusTable2, setTextColorStatusTable2] = useState('text-[green]')
//     const [bgTable2, setBgTable2] = useState('')
//     const [statusIsSelectedTable2, setStatusIsSelectedTable2] = useState('')
//     const [isDisabledTable2, setIsDisabledTable2] = useState(false)

//     const [allTables, setAllTables] = useState([])
//     const [pbTables, setPbTables] = useState([])


//     const token = useSelector((state) => state.auth.token)
//     console.log(token)
    
 
//     useEffect (() => {
//         axios.get("https://challengefinalbackvoyager.onrender.com/api/tables/", {
//             header: {
//                 Authorization: `Bearer ${token}`,
//             }
//         })
//         .then(reponse => {
//             console.log(reponse)
//             setAllTables(reponse.data)
//         })
//         .catch(error => {
//             console.log(error)
//         })
//     }, [])

//   useEffect(() => {
//     if (allTables.length > 0) {
//       const filteredTables = allTables.filter(
//         (table) => table.sector === "GROUND_FLOOR"
//       );
//       setGroundFloorTables(filteredTables);
//     }
//   }, [allTables]);

//   useEffect(() => {
//     if (selectedDate && selectedTime) {
//       const updatedStatus = {};
//       groundFloorTables.forEach((table) => {
//         updatedStatus[table.id] = "free";
//       });

//       const selectedDateTime = new Date(`${selectedDate}T${selectedTime}`);

//       reservations.forEach((reservation) => {
//         const reservationStart = new Date(reservation.reservationStart);
//         const reservationEnd = new Date(reservation.reservationEnd);

//         if (
//           selectedDateTime >= reservationStart &&
//           selectedDateTime < reservationEnd
//         ) {
//           updatedStatus[reservation.tableId] = "reserved";
//         }
//       });

//       setTableStatus(updatedStatus);
//     } else {
//       const initialStatus = {};
//       groundFloorTables.forEach((table) => {
//         initialStatus[table.id] = "free";
//       });
//       setTableStatus(initialStatus);
//     }
//   }, [selectedDate, selectedTime, groundFloorTables, reservations]);

//   const timeSlots = ["20:00", "21:30", "23:00"];


//   const navigate = useNavigate();

//   const handleReservation = (e) => {
//     e.preventDefault();

//     let hasError = false;

//     if (!selectedTableId) {
//       setErrorMessage("Please select a table.");
//       hasError = true;
//     } else {
//       setErrorMessage("");
//     }

//     if (!selectedDate) {
//       setDateError("Please select a date.");
//       hasError = true;
//     } else {
//       setDateError("");
//     }

//     if (!selectedTime) {
//       setTimeError("Please select a time.");
//       hasError = true;
//     } else {
//       setTimeError("");
//     }

//     if (hasError) return;

//     const initialReservTime = `${selectedDate}T${selectedTime}`;
//     const reservationData = {
//       tableId: selectedTableId,
//       initialReservTime: initialReservTime,
//     };

//     console.log(initialReservTime);

//     axios
//       .post("https://challengefinalbackvoyager.onrender.com/api/clientTables/create", reservationData, {
//         headers: {
//           Authorization: `Bearer ${localStorage.getItem("token")}`,
//         },
//       })
//       .then((response) => {
//         console.log("Reservation created:", response.data);
//         // Add logic to handle success, e.g., showing a success message or resetting fields


//         Swal.fire({
//           icon: 'success',
//           title: '',
//           text: 'your reserved has been created succesfully',
//           // timer: 2000, // El temporizador dura 3 segundos (3000 milisegundos)
//           showConfirmButton: true, // Oculta el botón de confirmación
//           willClose: () => {
//               navigate("/"); // Navegar después de que la alerta desaparezca
//           }
//       });




//       })
//       .catch((error) => {
//         console.error("Error creating the reservation:", error);
//       });
//   };




  
//   return (
//     <div className="flex flex-col justify-center items-center gap-[30px]">
//       <div className="flex flex-row-reverse gap-[30px] mt-[20px]">
//         <form className="w-[50%] flex flex-col gap-[45px] items-center pt-[50px] relative">
//           <h2 className="text-3xl font-bold text-yellow-500">
//             Table Reservation
//           </h2>

//           <div className="flex flex-col gap-4 text-white font-bold">
//             <div className="flex gap-4 items-center">
//               <label className="whitespace-nowrap">Reservation Date:</label>
//               <input
//                 className="text-black text-center border border-gray-300 rounded-lg p-2"
//                 type="date"
//                 value={selectedDate}
//                 onChange={(e) => setSelectedDate(e.target.value)}
//                 min={today} // Desde hoy
//                 max={
//                   new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
//                     .toISOString()
//                     .split("T")[0]
//                 } // Hasta 7 días adelante
//               />
//             </div>
//             {dateError && <p className="text-red-500 font-bold text-sm text-center">{dateError}</p>}
//             <div className="flex gap-4 items-center">
//               <label className="whitespace-nowrap">Reservation Time:</label>
//               <select
//                 className="text-black text-center border border-gray-300 rounded-lg p-2"
//                 value={selectedTime}
//                 onChange={(e) => setSelectedTime(e.target.value)}
//               >
//                 <option value="">Select Time</option>
//                 {timeSlots.map((time, index) => (
//                   <option key={index} value={time}>
//                     {time}
//                   </option>
//                 ))}
//               </select>
//             </div>
//             {timeError && <p className="text-red-500 font-bold text-sm text-center">{timeError}</p>}
//           </div>
//           {errorMessage && (
//             <p className="text-red-500 text-sm font-bold text-center">{errorMessage}</p>
//           )}
//           <button
//             onClick={handleReservation}
//             className="bg-yellow-500 hover:bg-yellow-600 p-5 font-bold text-blue-950 rounded-xl"
//           >
//             Reserve
//           </button>
//           <p className="w-[550px] text-yellow-500 text-[14px]">
//             (*)Reservations can be made with a maximum of two hours in advance
//             and are available from the current day up to 7 days ahead. We offer
//             three dinner shifts, starting at 20:00 (8 PM) and running until
//             02:00 (2 AM). If you need to cancel your reservation, please do so
//             with two hours' notice. Thank you for choosing us for your dining
//             experience.
//           </p>
//         </form>
//         <div className="bgTablePB border-2 border-yellow-500 relative h-[75vh] w-[600px] rounded-xl">
//           <div className="bg-yellow-500 p-2  rounded-lg absolute right-0 text-[11.5px]">
//             <p className="flex items-center gap-0.5">
//               <i className="fa-solid fa-chair"></i> Capacity
//             </p>
//             <div className="flex items-center gap-0.5 mt-0.5">
//               <div className="w-[8px] h-[8px] rounded-full border border-black bg-[#FFFFFF80]"></div>
//               <p>Available</p>
//             </div>
//             <div className="flex items-center gap-0.5 mt-0.5">
//               <div className="w-[8px] h-[8px] rounded-full border border-black bg-[#00800080]"></div>
//               <p>Selected</p>
//             </div>
//             <div className="flex items-center gap-0.5 mt-0.5">
//               <div className="w-[8px] h-[8px] rounded-full border border-black bg-red-500 bg-opacity-60"></div>
//               <p>Reserved</p>
//             </div>
//           </div>

//           {groundFloorTables.map((table, index) => {
//             let customClass =
//               "border-2 border-black absolute rounded-[100px] flex flex-col items-center justify-center text-[13px] font-bold";

//             if (tableStatus[table.id] === "reserved") {
//               customClass +=
//                 " bg-red-500 bg-opacity-60 text-white cursor-not-allowed"; // Mesa reservada con estilos
//             } else if (selectedTableId === table.id) {
//               customClass += " bg-[#00800080]"; // Mesa seleccionada
//             } else {
//               customClass +=
//                 " bg-[#FFFFFF80] hover:bg-[#00000099] cursor-pointer"; // Mesa libre
//             }

//             switch (index) {
//               case 0:
//                 customClass += " top-[7%] left-[7.5%] w-[12%] h-[12%]";
//                 break;
//               case 1:
//                 customClass += " top-[15%] left-[23%] w-[23%] h-[14%]";
//                 break;
//               case 2:
//                 customClass += " top-[31%] left-[16%] w-[12%] h-[12%]";
//                 break;
//               case 3:
//                 customClass += " top-[47%] left-[13%] w-[12%] h-[12%]";
//                 break;
//               case 4:
//                 customClass += " top-[61%] left-[18%] w-[12%] h-[12%]";
//                 break;
//               case 5:
//                 customClass += " top-[71%] left-[8%] w-[12%] h-[12%]";
//                 break;
//               case 6:
//                 customClass += " top-[81%] left-[18%] w-[12%] h-[12%]";
//                 break;
//               case 7:
//                 customClass += " top-[71%] left-[28%] w-[12%] h-[12%]";
//                 break;
//               case 8:
//                 customClass += " top-[70%] left-[59%] w-[12%] h-[12%]";
//                 break;
//               case 9:
//                 customClass += " bottom-[7%] left-[68%] w-[12%] h-[12%]";
//                 break;
//               case 10:
//                 customClass += " top-[46%] left-[72%] w-[12%] h-[12%]";
//                 break;
//               case 11:
//                 customClass += " top-[60%] left-[68%] w-[12%] h-[12%]";
//                 break;
//               case 12:
//                 customClass += " top-[70%] left-[79%] w-[12%] h-[12%]";
//                 break;
//               case 13:
//                 customClass += " top-[31%] left-[71%] w-[12%] h-[12%]";
//                 break;
//               case 14:
//                 customClass += " top-[14%] left-[65%] w-[22%] h-[15%]";
//                 break;
//               default:
//                 customClass += " top-[30%] left-[70%] w-[18%] h-[15%]";
//             }

//             return (
//               <div
//                 key={index}
//                 onClick={() => {
//                   if (tableStatus[table.id] !== "reserved") {
//                     if (selectedTableId === table.id) {
//                       setSelectedTableId(null); // Deseleccionar la mesa
//                     } else {
//                       setSelectedTableId(table.id); // Seleccionar la mesa
//                     }
//                   }
//                 }}
//                 className={`${customClass} text-black hover:text-white text-[12px]`}
//               >
//                 <p className="">{table.id}</p>
//                 <p>
//                   {table.seats} <i className="fa-solid fa-chair"></i>{" "}
//                 </p>
//               </div>
//             );
//           })}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default TablePB;















































































